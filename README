1. status

git status

Rien n'a été modifié, la copie de travail (working copy) est propre (clean).

Editez le fichier foo.txt et repondez à la premiere question, sauvegardez.

git status 

le fichier apparait comme étant modifié, mais les modifications apportés ne sont pas encore portés dans la staging area

Mettez vos modifications apportés à foo.txt dans la stating area :

git add foo.txt

git status

Le fichier est toujours modifié, mais est désormais dans la staging area qui contient tout ce qui part dans le prochain commit

Si à cette étape vous modifier à nouveau le fichier foo.txt, pour réagir à la 2ème phrase par exemple, git status vous dira alors qu'il est modifié en deux parties : une partie dans la staging area, une autre qui n'y est pas et ne fera pas parti du prochain commit.

Pour voir ce qui va partir dans le prochain commit :
git diff --cached

Pour voir ce que vous avez modifié depuis le dernier git add
git diff


2. commit
git commit -m "Vim Power, Bonjour Margueritte"
Dans ce cas là, le message passé entre guillemets formera le titre du commit, sans message.

git commit
Un editeur de texte s'ouvre et vous pourrez renseigner le titre du commit sur la première ligne et le détail du commit à partir de la 3ème ligne.
(git log permet de selectionner le titre ou le detail du commit)

git log -1
et vous verrez le dernier commit avec les infos de base (identifiant du commit, auteur, date, titre et message de commit)

oops, vous avez mis un message de commit pourri
git commit --amend
git commit --amend "un message de commit un peu mieux"

oops, j'ai oublié de commiter un fichier
git add foo.txt
git commit --amend

Attention, l'option --amend, modifie l'historique
Si vous avez fait un amend, faites un nouveau git log -1 et vous verrez que l'identifiant du commit n'est plus le même.


3. grep
C'est dans quel fichier que je me suis mis à parler de vache ?
git grep vache
Par défaut, il cherche dans les fichiers indexés (tracked), il suffit d'ajouter --untracked pour chercher dans les fichiers non indexés.


4. log
C'est dans quel commit que j'ai fixé le bug 3615 ? Je sais que j'ai mis le numéro de bug dans le message de commit
git log --grep 3615

C'est quoi les 10 derniers commits ?
git log -10
et les 20 derniers ?
git log -20

C'est dans quel commit où je me suis mis à parler de vache dans un des fichiers indexés ?
git log -S vache

Il existe beaucoup d'autres options détaillées dans l'aide de la commande log
git help log
entre autres :
- afficher les logs à partir/avant/entre certaines dates
- afficher seulement certaines infos (sha1 reduit + titre) --oneline
- chercher par auteur --author
- voir les noms des fichiers modifiés --name-only
- voir les differences apportés -p


5. branch et merge
5.1 cas simple
Pour créer une branche, pour traiter un bug par exemple, sans déranger la branche master :
git branch hotfix_3617
Cette commande ne fait que créer la branche, vous êtes toujours sur la branche master, pour vous en assurer :
git branch # une petite étoile devant la branche courante
git status # sur la première ligne, votre branche courante est indiquée.

Pour aller sur cette branche :
git checkout hotfix_3617

La branche a été crée à partir de l'endroit où vous étiez.
Fixez le bug en répondant à la 3ème question
commitez le bugfix dans la branche hotfix_3617
git commit -am "bugfix 3617 : my boss could not figure that out"

Rien de plus simple, on commence par aller dans la branche dans laquelle on veut merger, dans notre cas, on veut que la branche master contienne le bugfix 3617 :
git checkout master
et on merge la branche qui contient le bugfix :
git merge hotfix_3617
et voilà !
L'opération de merge a fait un fast forward car il n'y a eu aucune modification sur la branche master à partir du moment où la branche hotfix_3617 a été crée, le merge est donc trivial et consiste à déplacer le pointeur de branche master au niveau du pointeur de branche


5.2 cas moins simple
Voyons le cas du merge où il y a eu des modifications sur la branche dans laquelle on merge depuis que la branche mergée a été créée.
Creation de la branche et positionnement sur cette branche, car je préfère taper une seule commande plutot que deux ( git branch + git checkout)
git checkout -b wtf_sncf
le flag -b permet de creer la branche, la commande checkout permet de se rendre sur la branche.
Répondez à la question 4, et commitez.

Retournez dans la branche master
git checkout master
Répondez à la question 5 et commitez (sur la branche master !)

pour voir la liste des branches qui n'ont pas encore été mergée sur la branche courante :
git branch --no-merged
pratique pour savoir ce qu'il reste à merger, du coup on merge wtf_sncf :
git merge wtf_sncf
un editeur se lance pour que vous validiez le message du commit de merge, sauvegardez, quitter, le merge est fait.
